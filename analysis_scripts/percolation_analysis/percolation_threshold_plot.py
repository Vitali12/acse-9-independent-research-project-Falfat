# Falola Yusuf, Github: falfat
# -*- coding: utf-8 -*-
"""
Created on Thu Aug 22 18:07:11 2019

@author: falol
"""
import matplotlib.pyplot as plt

square_t =[0.67874999999999996, 0.90500000000000003, 1.1312500000000001, 1.3574999999999999,1.5837500000000002, 1.8100000000000001, 2.0362499999999999, 2.2625000000000002, 2.48875, 2.7149999999999999, 2.9412500000000001, 3.1675000000000004, 3.3937499999999998, 3.6200000000000001, 3.8462500000000004, 4.0724999999999998, 4.2987500000000001, 4.5250000000000004, 4.7512499999999998, 4.9775, 5.2037500000000003, 5.4299999999999997]
square_p =[0.0, 0.02, 0.059999999999999998, 0.084000000000000005, 0.17999999999999999, 0.25, 0.34999999999999998, 0.5, 0.60999999999999999, 0.68999999999999995, 0.80000000000000004, 0.88, 0.92000000000000004, 0.97999999999999998, 0.97999999999999998, 0.98999999999999999, 0.98999999999999999, 1.0, 1.0, 1.0, 1.0, 1.0]

# hexagon
hexagon_t = [0.93562499999999993, 1.2475000000000001, 1.5593750000000002, 1.8712499999999999, 2.1831250000000004, 2.4950000000000001, 2.8068749999999998, 3.1187500000000004, 3.430625, 3.7424999999999997, 4.0543750000000003]
hexagon_p = [0.035999999999999997, 0.048000000000000001, 0.091999999999999998, 0.19600000000000001, 0.32800000000000001, 0.53600000000000003, 0.67600000000000005, 0.84799999999999998, 0.872, 0.94399999999999995, 0.97599999999999998]

# triangle
tri_t=[1.2149999999999999, 1.3500000000000001, 1.4850000000000001, 1.6199999999999999, 1.7550000000000001, 1.8900000000000001, 2.0249999999999999, 2.1600000000000001, 2.2950000000000004, 2.4299999999999997, 2.5649999999999999, 2.7000000000000002, 2.835, 2.9700000000000002, 3.105, 3.2399999999999998, 3.5100000000000002, 3.6450000000000005, 3.7800000000000002, 3.9149999999999996, 4.0499999999999998]
tri_p=[0.040000000000000001, 0.059999999999999998, 0.080000000000000002, 0.13600000000000001, 0.16, 0.22800000000000001, 0.26800000000000002, 0.36799999999999999, 0.48399999999999999, 0.55600000000000005, 0.62, 0.748, 0.82399999999999995, 0.876, 0.90000000000000002, 0.92400000000000004, 0.96799999999999997, 0.97999999999999998, 0.99199999999999999, 0.99199999999999999, 1.0]

# octagon
oct_t = [0.69237499999999996, 1.0385624999999998, 1.3847499999999999, 1.7309375, 2.07375, 2.2120000000000002, 2.35025, 2.4884999999999997,2.7650000000000001, 3.1106249999999998, 3.4562500000000003, 3.8018749999999999, 4.1475, 4.493125]
oct_p = [0.0, 0.032000000000000001, 0.064000000000000001, 0.188, 0.32000000000000001, 0.35199999999999998, 0.47199999999999998, 0.57599999999999996 , 0.65200000000000002, 0.78400000000000003, 0.872, 0.95999999999999996, 0.97599999999999998, 0.996]


fig = plt.figure(figsize=(8, 6))
ax1 = fig.add_subplot(111)

#ax1.plot(pentagon_t , pentagon_p, 'ro-', label='pentagon')
ax1.plot(square_t, square_p, 'bo-', label='square')
ax1.plot(hexagon_t, hexagon_p, 'go-', label='hexagon')
ax1.plot(tri_t, tri_p, 'ro-', label='triangle')
ax1.plot(oct_t, oct_p, 'yo-', label='octagon')

plt.xlabel("dimensionless density")
plt.ylabel("percolation probability")
plt.title("percolation threshold plot")
# Add a legend
ax1.legend(loc='best', fontsize=14)
plt.savefig('percolation_threshold')
plt.show()

